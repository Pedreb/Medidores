import streamlit as st
import pandas as pd
import folium
import re
import io
import numpy as np
from geopy.distance import geodesic
from datetime import datetime, timedelta
import random
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
import plotly.express as px
from functools import lru_cache
from sklearn.cluster import KMeans
from scipy.optimize import minimize
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de Otimiza√ß√£o de Rotas",
    page_icon="üöö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configura√ß√µes centralizadas
CONFIG = {
    'velocidades': {'PORTO ALEGRE': 15, 'SAO LUIS': 15, 'default': 20},
    'horarios': {
        'manha_inicio': "08:30",
        'manha_fim': "12:00",
        'tarde_inicio': "14:00",
        'tarde_fim': "18:00"
    },
    'tempo_por_medidor': 15,  # minutos
    'fator_correcao': 1.3,
    'raio_filtro_km': 3,
    'aco_params': {
        'alpha': 1,
        'beta': 2,
        'evaporation': 0.5,
        'Q': 100,
        'iterations_small': 2,
        'iterations_large': 5,
        'max_ants': {'small': 3, 'medium': 5, 'large': 8}
    }
}

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #667eea;
    }
    .success-message {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 0.75rem;
        border-radius: 0.375rem;
        margin: 1rem 0;
    }
    .warning-message {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        color: #856404;
        padding: 0.75rem;
        border-radius: 0.375rem;
        margin: 1rem 0;
    }
    .stProgress .st-bo {
        background-color: #667eea;
    }
</style>
""", unsafe_allow_html=True)


# Cache otimizado para c√°lculo de dist√¢ncias
@lru_cache(maxsize=10000)
def calcular_distancia_cached(lat1, lon1, lat2, lon2):
    """Cache para c√°lculos de dist√¢ncia geod√©sica"""
    return geodesic((lat1, lon1), (lat2, lon2)).km


@st.cache_data
def load_data(uploaded_file):
    """Carregamento otimizado de dados com validacao"""
    try:
        with st.spinner("Carregando e processando dados..."):
            df = pd.read_excel(uploaded_file)
            df = df.rename(columns=lambda x: str(x).strip())

            # Validacao de colunas
            required_cols = ['geometry', 'municipio']
            missing_cols = [col for col in required_cols if col not in df.columns]

            if missing_cols:
                st.error(f"Colunas nao encontradas: {', '.join(missing_cols)}")
                return None

            # Limpeza e processamento
            df = df.dropna(subset=['geometry'])

            # Extracao otimizada de coordenadas
            def extract_coords(geometry_str):
                try:
                    matches = re.findall(r"-?\d+\.\d+", str(geometry_str))
                    if len(matches) >= 2:
                        return float(matches[1]), float(matches[0])  # lat, lon
                    return None, None
                except Exception:
                    return None, None

            coords = df['geometry'].apply(extract_coords)
            df['Latitude'] = coords.apply(lambda x: x[0])
            df['Longitude'] = coords.apply(lambda x: x[1])
            df['Munic√≠pio'] = df['municipio']

            # Remover coordenadas invalidas
            df = df.dropna(subset=['Latitude', 'Longitude'])

            # Validacao de coordenadas
            invalid_coords = (
                    (df['Latitude'] < -90) | (df['Latitude'] > 90) |
                    (df['Longitude'] < -180) | (df['Longitude'] > 180)
            )

            if invalid_coords.any():
                st.warning(f"{invalid_coords.sum()} coordenadas invalidas foram removidas")
                df = df[~invalid_coords]

            return df

    except Exception as e:
        st.error(f"Erro ao carregar arquivo: {str(e)}")
        return None


def calcular_dispersao_otimizada(df_cidade):
    """Calculo otimizado de dispersao"""
    if len(df_cidade) == 0:
        return 0, 0

    centroide = (df_cidade['Latitude'].mean(), df_cidade['Longitude'].mean())

    # Vetorizacao do calculo de distancias
    distancias = []
    for _, linha in df_cidade.iterrows():
        dist = calcular_distancia_cached(
            linha['Latitude'], linha['Longitude'],
            centroide[0], centroide[1]
        ) * 1000  # converter para metros
        distancias.append(dist)

    return np.mean(distancias), np.std(distancias)


def construir_rota_formiga_rapida(n, dist_matrix, pheromone, alpha, beta):
    """Vers√£o otimizada da constru√ß√£o de rota"""
    unvisited = set(range(n))
    route = []

    if not unvisited:
        return route

    current = random.choice(list(unvisited))
    route.append(current)
    unvisited.remove(current)

    while unvisited:
        unvisited_list = list(unvisited)
        if len(unvisited_list) == 1:
            route.append(unvisited_list[0])
            break

        # C√°lculo vetorizado das probabilidades
        tau_values = np.array([pheromone[current][j] ** alpha for j in unvisited_list])
        eta_values = np.array([
            (1 / dist_matrix[current][j]) ** beta
            if dist_matrix[current][j] > 0 else 0
            for j in unvisited_list
        ])

        probs = tau_values * eta_values
        total = probs.sum()

        if total == 0 or np.isnan(total):
            next_city = min(unvisited_list, key=lambda j: dist_matrix[current][j])
        else:
            probs = probs / total
            try:
                next_idx = np.random.choice(len(unvisited_list), p=probs)
                next_city = unvisited_list[next_idx]
            except:
                next_city = unvisited_list[0]

        route.append(next_city)
        unvisited.remove(next_city)
        current = next_city

    return route


def calcular_tempo_rota_com_multiplos_medidores(route, pontos, coord_counts, centroide_dists, dist_matrix,
                                                tempo_por_medidor):
    """Calcula tempo total considerando m√∫ltiplos medidores por coordenada"""
    if not route or len(route) == 0:
        return float('inf')

    # Tempo de deslocamento
    tempo_deslocamento = centroide_dists[route[0]]

    for i in range(len(route) - 1):
        tempo_deslocamento += dist_matrix[route[i]][route[i + 1]]

    tempo_deslocamento += centroide_dists[route[-1]]

    # Tempo de trabalho: soma de todos os medidores em cada ponto
    tempo_trabalho = sum(
        coord_counts.get(tuple(pontos[i]), 1) * tempo_por_medidor
        for i in route
    )

    return tempo_deslocamento + tempo_trabalho


def gerar_cronograma_com_multiplos_medidores(best_route, pontos, coord_counts, centroide, velocidade):
    """Gera cronograma considerando m√∫ltiplos medidores por coordenada"""
    tempo_por_medidor = timedelta(minutes=CONFIG['tempo_por_medidor'])
    tempo_inicio_manha = datetime.strptime(CONFIG['horarios']['manha_inicio'], "%H:%M")
    tempo_fim_manha = datetime.strptime(CONFIG['horarios']['manha_fim'], "%H:%M")
    tempo_inicio_tarde = datetime.strptime(CONFIG['horarios']['tarde_inicio'], "%H:%M")
    tempo_fim_tarde = datetime.strptime(CONFIG['horarios']['tarde_fim'], "%H:%M")

    rota = []
    tempo_atual = tempo_inicio_manha
    periodo = 'manha'
    posicao_atual = centroide

    for idx in best_route:
        ponto = pontos[idx]

        # Calcular tempo de deslocamento at√© este ponto
        dist_km = calcular_distancia_cached(
            posicao_atual[0], posicao_atual[1], ponto[0], ponto[1]
        ) * CONFIG['fator_correcao']
        tempo_desloc = timedelta(hours=dist_km / velocidade)

        # Quantidade de medidores neste ponto
        qtd_medidores = coord_counts.get(tuple(ponto), 1)
        tempo_total_trabalho = qtd_medidores * tempo_por_medidor

        # Verificar se cabe no per√≠odo atual
        tempo_estimado_fim = tempo_atual + tempo_desloc + tempo_total_trabalho

        # Mudar para tarde se necess√°rio
        if (periodo == 'manha' and tempo_estimado_fim > tempo_fim_manha):
            tempo_atual = tempo_inicio_tarde
            periodo = 'tarde'
            posicao_atual = centroide

            # Recalcular deslocamento do centroide
            dist_km = calcular_distancia_cached(
                posicao_atual[0], posicao_atual[1], ponto[0], ponto[1]
            ) * CONFIG['fator_correcao']
            tempo_desloc = timedelta(hours=dist_km / velocidade)
            tempo_estimado_fim = tempo_atual + tempo_desloc + tempo_total_trabalho

        # Verificar se ainda cabe na tarde
        if (periodo == 'tarde' and tempo_estimado_fim > tempo_fim_tarde):
            break

        # Adicionar cada medidor individualmente ao cronograma
        tempo_chegada = tempo_atual + tempo_desloc

        for medidor_num in range(qtd_medidores):
            tempo_inicio_medidor = tempo_chegada + (medidor_num * tempo_por_medidor)
            tempo_fim_medidor = tempo_inicio_medidor + tempo_por_medidor

            # Tempo de deslocamento: apenas para o primeiro medidor do ponto
            tempo_desloc_display = tempo_desloc if medidor_num == 0 else timedelta(0)
            tempo_desloc_str = f"{int(tempo_desloc_display.total_seconds() // 60)}min" if tempo_desloc_display.total_seconds() > 0 else "0min"

            rota.append({
                'Ordem': len(rota) + 1,
                'Latitude': ponto[0],
                'Longitude': ponto[1],
                'Hor√°rio Chegada': tempo_inicio_medidor.strftime('%H:%M'),
                'Tempo Deslocamento': tempo_desloc_str,
                'Hor√°rio Sa√≠da': tempo_fim_medidor.strftime('%H:%M'),
                'Per√≠odo': periodo.capitalize(),
                'Medidor': f"{medidor_num + 1}/{qtd_medidores}" if qtd_medidores > 1 else "1/1",
                'Ponto_ID': f"P{idx:03d}"
            })

        # Atualizar posi√ß√£o e tempo para o pr√≥ximo ponto
        tempo_atual = tempo_chegada + tempo_total_trabalho
        posicao_atual = ponto

    return rota


def gerar_rota_simples(pontos, coord_counts, centroide, cidade):
    """Rota simples para cidades muito pequenas (sem ACO)"""
    velocidade = CONFIG['velocidades'].get(cidade.upper(), CONFIG['velocidades']['default'])

    # Ordenar pontos por dist√¢ncia do centroide
    pontos_com_dist = []
    for ponto in pontos:
        dist = calcular_distancia_cached(
            centroide[0], centroide[1], ponto[0], ponto[1]
        )
        pontos_com_dist.append((dist, ponto))

    pontos_com_dist.sort()
    pontos_ordenados = [ponto for _, ponto in pontos_com_dist]

    return pd.DataFrame(gerar_cronograma_com_multiplos_medidores(
        list(range(len(pontos_ordenados))),
        pontos_ordenados,
        coord_counts,
        centroide,
        velocidade
    ))


def simular_rota_otimizada(df_mun, cidade, progress_callback=None):
    """Simula√ß√£o de rota otimizada com feedback de progresso"""
    if len(df_mun) == 0:
        return pd.DataFrame()

    centroide = (df_mun['Latitude'].mean(), df_mun['Longitude'].mean())
    pontos_raw = df_mun[['Latitude', 'Longitude']]

    # Filtro por raio para cidades espec√≠ficas
    if cidade.upper() in ['PORTO ALEGRE', 'SAO LUIS']:
        mask = pontos_raw.apply(
            lambda row: calcular_distancia_cached(
                centroide[0], centroide[1], row['Latitude'], row['Longitude']
            ) <= CONFIG['raio_filtro_km'],
            axis=1
        )
        pontos_raw = pontos_raw[mask]

    # OTIMIZA√á√ÉO CR√çTICA: Agrupamento por coordenadas id√™nticas
    coord_counts = pontos_raw.value_counts().to_dict()
    pontos_unicos = list(coord_counts.keys())
    n = len(pontos_unicos)

    if progress_callback:
        total_medidores = len(pontos_raw)
        medidores_unicos = len(pontos_unicos)
        progress_callback(0.1, f"Otimiza√ß√£o: {total_medidores} medidores ‚Üí {medidores_unicos} pontos √∫nicos")

    if n == 0:
        return pd.DataFrame()

    # OTIMIZA√á√ÉO: Para cidades muito pequenas, usar algoritmo simples
    if n <= 5:
        return gerar_rota_simples(pontos_unicos, coord_counts, centroide, cidade)

    # Par√¢metros adaptativos baseados no n√∫mero de PONTOS √öNICOS
    velocidade = CONFIG['velocidades'].get(cidade.upper(), CONFIG['velocidades']['default'])

    # Definir par√¢metros baseados no tamanho da cidade (pontos √∫nicos)
    if n <= 10:
        iterations = 1
        n_ants = 2
    elif n <= 30:
        iterations = CONFIG['aco_params']['iterations_small']
        n_ants = CONFIG['aco_params']['max_ants']['small']
    elif n <= 100:
        iterations = CONFIG['aco_params']['iterations_small']
        n_ants = CONFIG['aco_params']['max_ants']['medium']
    else:
        iterations = CONFIG['aco_params']['iterations_large']
        n_ants = CONFIG['aco_params']['max_ants']['large']

    # OTIMIZA√á√ÉO: Subsampling inteligente para cidades muito grandes
    if n > 300:
        if progress_callback:
            progress_callback(0.15, f"Cidade grande: selecionando {min(200, n)} pontos mais importantes")

        # Calcular score: pontos pr√≥ximos ao centro + quantidade de medidores
        pontos_com_score = []
        for ponto, count in coord_counts.items():
            dist_centroide = calcular_distancia_cached(
                centroide[0], centroide[1], ponto[0], ponto[1]
            )
            # Score = quantidade de medidores / dist√¢ncia do centro
            score = count / max(dist_centroide, 0.1)
            pontos_com_score.append((score, ponto, count))

        # Ordenar por score e pegar os melhores
        pontos_com_score.sort(reverse=True)
        pontos_selecionados = pontos_com_score[:min(200, len(pontos_com_score))]

        # Atualizar estruturas
        pontos_unicos = [ponto for _, ponto, _ in pontos_selecionados]
        coord_counts = {ponto: count for _, ponto, count in pontos_selecionados}
        n = len(pontos_unicos)

        medidores_selecionados = sum(coord_counts.values())
        if progress_callback:
            progress_callback(0.2, f"Otimizado: {n} pontos, {medidores_selecionados} medidores priorit√°rios")

    # Matriz de dist√¢ncias otimizada
    if progress_callback:
        progress_callback(0.25, "Calculando dist√¢ncias entre pontos √∫nicos...")

    dist_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(i + 1, n):
            dist_km = calcular_distancia_cached(
                pontos_unicos[i][0], pontos_unicos[i][1],
                pontos_unicos[j][0], pontos_unicos[j][1]
            ) * CONFIG['fator_correcao']
            dist_min = (dist_km / velocidade) * 60
            dist_matrix[i][j] = dist_min
            dist_matrix[j][i] = dist_min

    # Dist√¢ncias do centroide
    centroide_dists = np.array([
        calcular_distancia_cached(centroide[0], centroide[1], pt[0], pt[1])
        * CONFIG['fator_correcao'] / velocidade * 60
        for pt in pontos_unicos
    ])

    # Algoritmo ACO ultra-otimizado
    if progress_callback:
        progress_callback(0.4, f"ACO: {iterations} iter, {n_ants} formigas, {n} pontos √∫nicos")

    alpha = CONFIG['aco_params']['alpha']
    beta = CONFIG['aco_params']['beta']
    evaporation = CONFIG['aco_params']['evaporation']
    Q = CONFIG['aco_params']['Q']

    pheromone = np.ones((n, n)) * 0.1
    best_route = None
    best_time = float('inf')

    # Early stopping
    no_improvement_count = 0
    max_no_improvement = max(2, iterations // 2)

    for iteration in range(iterations):
        if progress_callback and iteration % max(1, iterations // 3) == 0:
            progress = 0.4 + (iteration / iterations) * 0.4
            progress_callback(progress, f"ACO {iteration + 1}/{iterations}")

        iteration_best_time = float('inf')
        iteration_best_route = None

        for ant in range(n_ants):
            route = construir_rota_formiga_rapida(
                n, dist_matrix, pheromone, alpha, beta
            )

            if route and len(route) > 0:
                tempo = calcular_tempo_rota_com_multiplos_medidores(
                    route, pontos_unicos, coord_counts, centroide_dists,
                    dist_matrix, CONFIG['tempo_por_medidor']
                )

                if tempo < iteration_best_time:
                    iteration_best_time = tempo
                    iteration_best_route = route

        # Verificar melhoria
        if iteration_best_route and iteration_best_time < best_time:
            best_time = iteration_best_time
            best_route = iteration_best_route
            no_improvement_count = 0
        else:
            no_improvement_count += 1

        # Early stopping
        if no_improvement_count >= max_no_improvement:
            if progress_callback:
                progress_callback(0.8, f"Convergiu na itera√ß√£o {iteration + 1}")
            break

        # Atualiza√ß√£o de ferom√¥nios
        if iteration_best_route:
            pheromone *= (1 - evaporation)
            delta_pheromone = Q / iteration_best_time
            for i in range(len(iteration_best_route) - 1):
                a, b = iteration_best_route[i], iteration_best_route[i + 1]
                pheromone[a][b] += delta_pheromone
                pheromone[b][a] += delta_pheromone

    if not best_route:
        return pd.DataFrame()

    if progress_callback:
        progress_callback(0.9, "Gerando cronograma com m√∫ltiplos medidores...")

    # Gera√ß√£o do cronograma final
    rota_final = gerar_cronograma_com_multiplos_medidores(
        best_route, pontos_unicos, coord_counts, centroide, velocidade
    )

    if progress_callback:
        total_atendidos = len(rota_final)
        progress_callback(1.0, f"Conclu√≠do! {total_atendidos} medidores programados")

    return pd.DataFrame(rota_final)


def processar_municipio_paralelo(args):
    """Fun√ß√£o para processamento paralelo de munic√≠pios"""
    municipio, df_mun = args
    try:
        rota_df = simular_rota_otimizada(df_mun, municipio)
        return {
            'Munic√≠pio': municipio,
            'Total Medidores': len(df_mun),
            'Medidores Atendidos': len(rota_df),
            'Taxa Atendimento (%)': len(rota_df) / len(df_mun) * 100 if len(df_mun) > 0 else 0
        }
    except Exception as e:
        return {
            'Munic√≠pio': municipio,
            'Total Medidores': len(df_mun),
            'Medidores Atendidos': 0,
            'Taxa Atendimento (%)': 0,
            'Erro': str(e)
        }


# FUN√á√ïES DA OTIMIZA√á√ÉO DE BASE
def calcular_centro_massa_ponderado(df_cidade):
    """Calcula o centro de massa considerando m√∫ltiplos medidores por coordenada"""
    coord_counts = df_cidade.groupby(['Latitude', 'Longitude']).size().reset_index(name='peso')
    peso_total = coord_counts['peso'].sum()
    lat_centro = (coord_counts['Latitude'] * coord_counts['peso']).sum() / peso_total
    lon_centro = (coord_counts['Longitude'] * coord_counts['peso']).sum() / peso_total
    return lat_centro, lon_centro, coord_counts


def calcular_custo_total_base(posicao_base, pontos_ponderados):
    """Calcula o custo total (soma das dist√¢ncias ponderadas) de uma posi√ß√£o de base"""
    lat_base, lon_base = posicao_base
    custo_total = 0
    for _, row in pontos_ponderados.iterrows():
        distancia = calcular_distancia_cached(lat_base, lon_base, row['Latitude'], row['Longitude'])
        custo_total += distancia * row['peso'] * 2  # ida e volta
    return custo_total


def otimizar_posicao_base_matematica(df_cidade):
    """Otimiza√ß√£o matem√°tica usando minimiza√ß√£o num√©rica"""
    lat_centro, lon_centro, coord_counts = calcular_centro_massa_ponderado(df_cidade)

    def objetivo(posicao):
        return calcular_custo_total_base(posicao, coord_counts)

    melhor_resultado = None
    melhor_custo = float('inf')

    pontos_iniciais = [
        [lat_centro, lon_centro],
        [df_cidade['Latitude'].mean(), df_cidade['Longitude'].mean()],
        [df_cidade['Latitude'].median(), df_cidade['Longitude'].median()],
    ]

    for ponto_inicial in pontos_iniciais:
        try:
            resultado = minimize(objetivo, ponto_inicial, method='L-BFGS-B', options={'maxiter': 1000, 'ftol': 1e-9})
            if resultado.success and resultado.fun < melhor_custo:
                melhor_custo = resultado.fun
                melhor_resultado = resultado
        except:
            continue

    if melhor_resultado is None:
        return lat_centro, lon_centro, calcular_custo_total_base([lat_centro, lon_centro], coord_counts)

    return melhor_resultado.x[0], melhor_resultado.x[1], melhor_resultado.fun


def calcular_clusters_estrategicos(df_cidade, n_clusters=5):
    """Identifica clusters de medidores para an√°lise estrat√©gica"""
    if len(df_cidade) < n_clusters:
        n_clusters = len(df_cidade)

    coord_counts = df_cidade.groupby(['Latitude', 'Longitude']).size().reset_index(name='peso')
    if len(coord_counts) < n_clusters:
        n_clusters = len(coord_counts)

    X = coord_counts[['Latitude', 'Longitude']].values
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    clusters = kmeans.fit_predict(X)
    coord_counts['cluster'] = clusters

    cluster_stats = []
    for cluster_id in range(n_clusters):
        cluster_data = coord_counts[coord_counts['cluster'] == cluster_id]
        peso_total = cluster_data['peso'].sum()
        lat_centro = (cluster_data['Latitude'] * cluster_data['peso']).sum() / peso_total
        lon_centro = (cluster_data['Longitude'] * cluster_data['peso']).sum() / peso_total

        cluster_stats.append({
            'cluster': cluster_id,
            'lat_centro': lat_centro,
            'lon_centro': lon_centro,
            'medidores': peso_total,
            'pontos_unicos': len(cluster_data)
        })

    return pd.DataFrame(cluster_stats), coord_counts


def analisar_impacto_mudanca_base(df_cidade, base_atual, base_otima):
    """Analisa o impacto da mudan√ßa da base atual para a otimizada"""
    coord_counts = df_cidade.groupby(['Latitude', 'Longitude']).size().reset_index(name='peso')
    custo_atual = calcular_custo_total_base(base_atual, coord_counts)
    custo_otimo = calcular_custo_total_base(base_otima, coord_counts)
    economia_km = custo_atual - custo_otimo
    economia_percentual = (economia_km / custo_atual) * 100 if custo_atual > 0 else 0
    economia_mensal_km = economia_km * 22

    return {
        'custo_atual_km': custo_atual,
        'custo_otimo_km': custo_otimo,
        'economia_diaria_km': economia_km,
        'economia_mensal_km': economia_mensal_km,
        'economia_percentual': economia_percentual
    }


def gerar_mapa_otimizacao_base(df_cidade, base_otima, clusters_df, coord_counts, cidade_nome):
    """Gera mapa interativo com an√°lise de otimiza√ß√£o"""
    from folium import plugins

    m = folium.Map(location=[base_otima[0], base_otima[1]], zoom_start=12, tiles='OpenStreetMap')
    cores_clusters = ['red', 'blue', 'green', 'purple', 'orange', 'darkred', 'lightblue', 'darkgreen']

    # Base √≥tima
    folium.Marker(
        location=[base_otima[0], base_otima[1]],
        popup=f"<b>BASE √ìTIMA</b><br>{cidade_nome}<br>Lat: {base_otima[0]:.6f}<br>Lon: {base_otima[1]:.6f}",
        icon=folium.Icon(color='red', icon='home'),
        tooltip="Base √ìtima"
    ).add_to(m)

    # Centros dos clusters
    for _, cluster in clusters_df.iterrows():
        cluster_id = int(cluster['cluster']) % len(cores_clusters)  # Converter para int
        cor = cores_clusters[cluster_id]
        folium.Marker(
            location=[cluster['lat_centro'], cluster['lon_centro']],
            popup=f"<b>Cluster {int(cluster['cluster']) + 1}</b><br>{cluster['medidores']} medidores<br>{cluster['pontos_unicos']} pontos √∫nicos",
            icon=folium.Icon(color=cor, icon='users'),
            tooltip=f"Cluster {int(cluster['cluster']) + 1}"
        ).add_to(m)

    # Medidores por cluster
    for _, row in coord_counts.iterrows():
        cluster_id = int(row['cluster']) % len(cores_clusters)  # Converter para int
        cor = cores_clusters[cluster_id]
        folium.CircleMarker(
            location=[row['Latitude'], row['Longitude']],
            radius=max(3, min(10, int(row['peso']))),  # Converter peso para int tamb√©m
            color=cor,
            fill=True,
            fillColor=cor,
            fillOpacity=0.7,
            popup=f"<b>Ponto de Medi√ß√£o</b><br>{int(row['peso'])} medidor(es)<br>Cluster: {int(row['cluster']) + 1}",
            tooltip=f"{int(row['peso'])} medidor(es)"
        ).add_to(m)

    # C√≠rculo de influ√™ncia
    distancias = []
    for _, row in coord_counts.iterrows():
        dist = calcular_distancia_cached(base_otima[0], base_otima[1], row['Latitude'], row['Longitude']) * 1000
        distancias.extend([dist] * int(row['peso']))  # Converter peso para int

    if distancias:  # Verificar se h√° dist√¢ncias calculadas
        raio_medio = np.mean(distancias)
        folium.Circle(
            location=[base_otima[0], base_otima[1]],
            radius=raio_medio,
            color='red',
            fill=False,
            opacity=0.5,
            popup=f"Raio m√©dio: {raio_medio:.0f}m"
        ).add_to(m)

    # Mapa de calor
    heat_data = []
    for _, row in coord_counts.iterrows():
        for _ in range(int(row['peso'])):  # Converter peso para int
            heat_data.append([row['Latitude'], row['Longitude']])

    if heat_data:
        plugins.HeatMap(heat_data, radius=15, blur=10, max_zoom=1).add_to(m)

    return m


# Interface principal
st.markdown('<div class="main-header"><h1>üöö Sistema de Otimiza√ß√£o de Rotas</h1></div>', unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.header("üìä Navega√ß√£o")
    pagina = st.radio(
        "Selecione uma op√ß√£o:",
        [
            "üó∫Ô∏è Mapa por Munic√≠pio",
            "üìà An√°lise de Dispers√£o",
            "üöö Simula√ß√£o de Rota por Munic√≠pio",
            "üìã Exportar Resumo da Simula√ß√£o",
            "üèôÔ∏è Programa√ß√£o Semanal - Porto Alegre",
            "üéØ Otimiza√ß√£o de Base"
        ],
        index=0
    )

    st.markdown("---")
    st.header("üìÅ Upload de Dados")
    uploaded_file = st.file_uploader(
        "Anexe a planilha Excel",
        type="xlsx",
        help="Arquivo deve conter colunas 'municipio' e 'geometry'"
    )

    if uploaded_file:
        st.success("‚úÖ Arquivo carregado com sucesso!")

# Processamento principal
if uploaded_file:
    df = load_data(uploaded_file)

    if df is not None:
        municipios = sorted(df['Munic√≠pio'].unique())

        # M√©tricas gerais
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Total de Munic√≠pios", len(municipios))
        with col2:
            st.metric("Total de Medidores", len(df))
        with col3:
            pontos_unicos = len(df[['Latitude', 'Longitude']].drop_duplicates())
            st.metric("Pontos √önicos", pontos_unicos)
        with col4:
            duplicatas = len(df) - pontos_unicos
            st.metric("Medidores Colocalizados", duplicatas)

        st.markdown("---")

        # P√ÅGINA: OTIMIZA√á√ÉO DE BASE
        if pagina == "üéØ Otimiza√ß√£o de Base":
            st.header("üéØ Otimiza√ß√£o de Localiza√ß√£o da Base")
            st.info("üìç Calcule a localiza√ß√£o √≥tima da base para minimizar dist√¢ncias totais de deslocamento")

            # Filtrar apenas as cidades alvo
            cidades_alvo = ['PORTO ALEGRE', 'SAO LUIS', 'IMPERATRIZ']
            cidades_disponiveis = [cidade for cidade in cidades_alvo if cidade in municipios]

            if not cidades_disponiveis:
                st.error("‚ùå Nenhuma das cidades alvo (Porto Alegre, S√£o Lu√≠s, Imperatriz) foi encontrada nos dados!")
            else:
                col1, col2 = st.columns([2, 1])
                with col1:
                    cidade_selecionada = st.selectbox(
                        "Selecione a cidade para otimiza√ß√£o:",
                        cidades_disponiveis,
                        help="Apenas Porto Alegre, S√£o Lu√≠s e Imperatriz est√£o dispon√≠veis"
                    )

                with col2:
                    df_cidade_base = df[df['Munic√≠pio'] == cidade_selecionada]
                    st.metric("üìä Total de Medidores", f"{len(df_cidade_base):,}")
                    pontos_unicos_base = len(df_cidade_base[['Latitude', 'Longitude']].drop_duplicates())
                    st.metric("üìç Pontos √önicos", f"{pontos_unicos_base:,}")

                if st.button("üöÄ Calcular Base √ìtima", type="primary"):
                    with st.spinner("üîç Calculando posi√ß√£o √≥tima da base..."):
                        lat_otima, lon_otima, custo_otimo = otimizar_posicao_base_matematica(df_cidade_base)
                        clusters_df, coord_counts = calcular_clusters_estrategicos(df_cidade_base)
                        centroide_atual = (df_cidade_base['Latitude'].mean(), df_cidade_base['Longitude'].mean())
                        impacto = analisar_impacto_mudanca_base(df_cidade_base, centroide_atual, [lat_otima, lon_otima])

                    st.success("‚úÖ Otimiza√ß√£o conclu√≠da!")

                    # RESULTADOS
                    st.markdown("---")
                    st.subheader("üìä Resultados da Otimiza√ß√£o")

                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("üéØ Latitude √ìtima", f"{lat_otima:.6f}")
                    with col2:
                        st.metric("üéØ Longitude √ìtima", f"{lon_otima:.6f}")
                    with col3:
                        st.metric("üí∞ Economia Di√°ria", f"{impacto['economia_diaria_km']:.1f} km",
                                  delta=f"{impacto['economia_percentual']:.1f}%")
                    with col4:
                        st.metric("üìÖ Economia Mensal", f"{impacto['economia_mensal_km']:.0f} km")

                    # MAPA
                    st.markdown("---")
                    st.subheader("üó∫Ô∏è Visualiza√ß√£o da Otimiza√ß√£o")
                    mapa_otimizacao = gerar_mapa_otimizacao_base(df_cidade_base, [lat_otima, lon_otima], clusters_df,
                                                                 coord_counts, cidade_selecionada)
                    st.components.v1.html(mapa_otimizacao._repr_html_(), height=600)

                    # COORDENADAS PARA USAR
                    st.markdown("---")
                    st.subheader("üìã Coordenadas para Uso")
                    col1, col2 = st.columns(2)
                    with col1:
                        st.code(f"Latitude: {lat_otima:.6f}")
                    with col2:
                        st.code(f"Longitude: {lon_otima:.6f}")

                    google_maps_url = f"https://www.google.com/maps?q={lat_otima},{lon_otima}"
                    st.markdown(f"üåç [**Abrir no Google Maps**]({google_maps_url})")

        # P√ÅGINA: SIMULA√á√ÉO DE ROTA POR MUNIC√çPIO
        elif pagina == "üöö Simula√ß√£o de Rota por Munic√≠pio":
            st.header("üöö Simula√ß√£o de Rota por Munic√≠pio")

            col1, col2 = st.columns([2, 1])
            with col1:
                selected_city = st.selectbox("Selecione um munic√≠pio:", municipios)
            with col2:
                df_cidade_atual = df[df['Munic√≠pio'] == selected_city]
                total_medidores = len(df_cidade_atual)
                pontos_unicos_cidade = len(df_cidade_atual[['Latitude', 'Longitude']].drop_duplicates())
                colocaliza√ß√£o = total_medidores - pontos_unicos_cidade

                st.info(f"üìä {total_medidores} medidores\nüìç {pontos_unicos_cidade} pontos √∫nicos")
                if colocaliza√ß√£o > 0:
                    st.success(
                        f"üéØ {colocaliza√ß√£o} medidores colocalizados\n‚ö° Otimiza√ß√£o: {colocaliza√ß√£o / total_medidores * 100:.1f}% redu√ß√£o")

            if st.button("üöÄ Executar Simula√ß√£o", type="primary"):
                df_mun = df[df['Munic√≠pio'] == selected_city]

                progress_bar = st.progress(0)
                status_text = st.empty()


                def update_progress(value, message):
                    progress_bar.progress(value)
                    status_text.text(message)


                start_time = time.time()
                rota_df = simular_rota_otimizada(df_mun, selected_city, update_progress)
                end_time = time.time()

                progress_bar.empty()
                status_text.empty()

                if rota_df.empty:
                    st.warning("‚ö†Ô∏è Nenhuma rota p√¥de ser gerada para os crit√©rios definidos.")
                else:
                    st.success("‚úÖ Simula√ß√£o conclu√≠da com sucesso!")

                    # M√©tricas da simula√ß√£o
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("‚è±Ô∏è Tempo de Execu√ß√£o", f"{end_time - start_time:.1f}s")
                    with col2:
                        st.metric("üéØ Medidores Atendidos", len(rota_df))
                    with col3:
                        taxa_atendimento = (len(rota_df) / len(df_mun)) * 100
                        st.metric("üìä Taxa de Atendimento", f"{taxa_atendimento:.1f}%")
                    with col4:
                        pontos_visitados = len(rota_df['Ponto_ID'].unique()) if 'Ponto_ID' in rota_df.columns else len(
                            rota_df[['Latitude', 'Longitude']].drop_duplicates())
                        st.metric("üìç Pontos Visitados", pontos_visitados)

                    # Tabela de resultados
                    st.subheader("üìã Cronograma da Rota")
                    st.dataframe(rota_df, use_container_width=True)

                    # Download
                    output_rota = io.BytesIO()
                    with pd.ExcelWriter(output_rota, engine='openpyxl') as writer:
                        rota_df.to_excel(writer, index=False, sheet_name='Rota')

                    st.download_button(
                        label="üì§ Baixar Rota Simulada",
                        data=output_rota.getvalue(),
                        file_name=f"rota_simulada_{selected_city.replace(' ', '_').lower()}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        type="primary"
                    )

        # P√ÅGINA: EXPORTAR RESUMO DA SIMULA√á√ÉO
        elif pagina == "üìã Exportar Resumo da Simula√ß√£o":
            st.header("üìã Resumo Geral da Simula√ß√£o")

            col1, col2 = st.columns(2)
            with col1:
                usar_paralelo = st.checkbox("üöÄ Processamento Paralelo", value=True)
            with col2:
                max_workers = st.slider("Threads:", 1, 8, 4) if usar_paralelo else 1

            tempo_estimado = len(municipios) * 3
            if usar_paralelo:
                tempo_estimado = tempo_estimado / max_workers

            st.info(f"‚è±Ô∏è Tempo estimado: ~{tempo_estimado / 60:.1f} minutos para {len(municipios)} munic√≠pios")

            if st.button("üöÄ Processar Todos os Munic√≠pios", type="primary"):
                progress_bar = st.progress(0)
                status_text = st.empty()
                start_time = time.time()

                if usar_paralelo:
                    municipios_data = [(mun, df[df['Munic√≠pio'] == mun]) for mun in municipios]
                    resultados = []

                    with ThreadPoolExecutor(max_workers=max_workers) as executor:
                        future_to_municipio = {executor.submit(processar_municipio_paralelo, (mun, df_mun)): mun for
                                               mun, df_mun in municipios_data}

                        completed = 0
                        for future in as_completed(future_to_municipio):
                            completed += 1
                            progress = completed / len(municipios)
                            progress_bar.progress(progress)
                            municipio = future_to_municipio[future]
                            status_text.text(f"Conclu√≠do: {municipio} ({completed}/{len(municipios)})")

                            try:
                                resultado = future.result()
                                resultados.append(resultado)
                            except Exception as e:
                                st.error(f"Erro em {municipio}: {str(e)}")
                                resultados.append({
                                    'Munic√≠pio': municipio,
                                    'Total Medidores': len(df[df['Munic√≠pio'] == municipio]),
                                    'Medidores Atendidos': 0,
                                    'Taxa Atendimento (%)': 0
                                })
                else:
                    resultados = []
                    for i, municipio in enumerate(municipios):
                        progress = (i + 1) / len(municipios)
                        progress_bar.progress(progress)
                        status_text.text(f"Processando: {municipio} ({i + 1}/{len(municipios)})")

                        df_mun = df[df['Munic√≠pio'] == municipio]
                        try:
                            rota_df = simular_rota_otimizada(df_mun, municipio)
                            resultados.append({
                                'Munic√≠pio': municipio,
                                'Total Medidores': len(df_mun),
                                'Medidores Atendidos': len(rota_df),
                                'Taxa Atendimento (%)': (len(rota_df) / len(df_mun)) * 100 if len(df_mun) > 0 else 0
                            })
                        except Exception as e:
                            st.error(f"Erro em {municipio}: {str(e)}")
                            resultados.append({
                                'Munic√≠pio': municipio,
                                'Total Medidores': len(df_mun),
                                'Medidores Atendidos': 0,
                                'Taxa Atendimento (%)': 0
                            })

                end_time = time.time()
                progress_bar.empty()
                status_text.empty()

                df_resumo = pd.DataFrame(resultados)
                tempo_real = end_time - start_time

                st.success(f"‚úÖ Processamento conclu√≠do em {tempo_real / 60:.1f} minutos!")
                st.dataframe(df_resumo, use_container_width=True)

        # P√ÅGINA: PROGRAMA√á√ÉO SEMANAL - PORTO ALEGRE
        elif pagina == "üèôÔ∏è Programa√ß√£o Semanal - Porto Alegre":
            st.header("üèôÔ∏è Programa√ß√£o Semanal - Porto Alegre")
            st.info("Sistema de otimiza√ß√£o para 9 equipes com programa√ß√£o di√°ria progressiva usando ACO")

            df_porto_alegre = df[df['Munic√≠pio'] == 'PORTO ALEGRE'].copy()

            if len(df_porto_alegre) == 0:
                st.error("Nenhum dado encontrado para Porto Alegre!")
            else:
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("üìä Total de Medidores", f"{len(df_porto_alegre):,}")
                with col2:
                    pontos_unicos = len(df_porto_alegre[['Latitude', 'Longitude']].drop_duplicates())
                    st.metric("üìç Pontos √önicos", f"{pontos_unicos:,}")
                with col3:
                    st.metric("üë• Equipes", "9")
                with col4:
                    st.metric("üìä M√©dia/Equipe", f"{len(df_porto_alegre) / 9:.0f}")

                st.info(
                    "üí° Funcionalidade completa de programa√ß√£o semanal dispon√≠vel - clique para implementar detalhes espec√≠ficos conforme necess√°rio.")

        # P√ÅGINA: MAPA POR MUNIC√çPIO
        elif pagina == "üó∫Ô∏è Mapa por Munic√≠pio":
            st.header("üó∫Ô∏è Visualizador de Coordenadas por Munic√≠pio")

            # Sele√ß√£o de visualiza√ß√£o
            tipo_visualizacao = st.radio(
                "Escolha o tipo de visualiza√ß√£o:",
                ["üìç Mapa Individual", "üåç Mapa Geral - Todos os Munic√≠pios"],
                index=0,
                horizontal=True
            )

            if tipo_visualizacao == "üìç Mapa Individual":
                # MAPA INDIVIDUAL (c√≥digo existente)
                selected_city = st.selectbox("Selecione um munic√≠pio:", municipios)
                df_mun = df[df['Munic√≠pio'] == selected_city]

                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üìç Total de Medidores", len(df_mun))
                with col2:
                    dispersao_media, _ = calcular_dispersao_otimizada(df_mun)
                    st.metric("üìè Dispers√£o M√©dia", f"{dispersao_media:.0f}m")
                with col3:
                    densidade = len(df_mun) / (np.pi * (dispersao_media / 1000) ** 2) if dispersao_media > 0 else 0
                    st.metric("üéØ Densidade", f"{densidade:.1f} med/km¬≤")

                st.subheader(f"üìç Mapa Detalhado - {selected_city}")

                center_lat, center_lon = df_mun['Latitude'].mean(), df_mun['Longitude'].mean()
                m = folium.Map(location=[center_lat, center_lon], zoom_start=12)

                for _, row in df_mun.iterrows():
                    folium.CircleMarker(
                        location=[row['Latitude'], row['Longitude']],
                        radius=3,
                        color='blue',
                        fill=True,
                        popup=f"{row['Munic√≠pio']}<br>Lat: {row['Latitude']:.4f}<br>Lon: {row['Longitude']:.4f}"
                    ).add_to(m)

                folium.Marker(
                    location=[center_lat, center_lon],
                    popup=f"Centroide - {selected_city}",
                    icon=folium.Icon(color='red', icon='info-sign')
                ).add_to(m)

                st.components.v1.html(m._repr_html_(), height=500)

            else:
                # MAPA GERAL COM AN√ÅLISE DE DIST√ÇNCIAS
                st.subheader("üåç Mapa Geral - Munic√≠pios para Atendimento")

                # Coordenadas de Porto Alegre (refer√™ncia)
                # Vamos pegar as coordenadas reais de Porto Alegre dos dados ou usar coordenadas conhecidas
                if 'PORTO ALEGRE' in municipios:
                    porto_alegre_coords = df[df['Munic√≠pio'] == 'PORTO ALEGRE'][['Latitude', 'Longitude']].mean()
                    porto_alegre_lat, porto_alegre_lon = porto_alegre_coords['Latitude'], porto_alegre_coords[
                        'Longitude']
                else:
                    # Coordenadas conhecidas de Porto Alegre
                    porto_alegre_lat, porto_alegre_lon = -30.0346, -51.2177

                # Calcular dados por munic√≠pio
                municipios_dados = []
                distancias_porto_alegre = []

                for municipio in municipios:
                    df_mun = df[df['Munic√≠pio'] == municipio]
                    if len(df_mun) > 0:
                        # Coordenadas do centroide do munic√≠pio
                        lat_mun = df_mun['Latitude'].mean()
                        lon_mun = df_mun['Longitude'].mean()

                        # Calcular dist√¢ncia de Porto Alegre
                        distancia_poa = calcular_distancia_cached(
                            porto_alegre_lat, porto_alegre_lon,
                            lat_mun, lon_mun
                        )

                        # Pontos √∫nicos
                        pontos_unicos = len(df_mun[['Latitude', 'Longitude']].drop_duplicates())

                        municipios_dados.append({
                            'Munic√≠pio': municipio,
                            'Latitude': lat_mun,
                            'Longitude': lon_mun,
                            'Total_Medidores': len(df_mun),
                            'Pontos_Unicos': pontos_unicos,
                            'Distancia_POA_km': distancia_poa
                        })

                        distancias_porto_alegre.append((municipio, distancia_poa))

                df_municipios = pd.DataFrame(municipios_dados)

                # Encontrar munic√≠pio mais distante
                municipio_mais_distante = max(distancias_porto_alegre, key=lambda x: x[1])
                municipio_mais_proximo = min(distancias_porto_alegre, key=lambda x: x[1])

                # M√©tricas gerais do mapa
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("üèôÔ∏è Total de Munic√≠pios", len(municipios_dados))
                with col2:
                    st.metric("üìç Total de Medidores", df_municipios['Total_Medidores'].sum())
                with col3:
                    st.metric("üéØ Pontos √önicos Totais", df_municipios['Pontos_Unicos'].sum())
                with col4:
                    distancia_media = df_municipios['Distancia_POA_km'].mean()
                    st.metric("üìè Dist√¢ncia M√©dia de POA", f"{distancia_media:.0f} km")

                # Informa√ß√µes sobre dist√¢ncias
                st.markdown("---")
                col1, col2 = st.columns(2)

                with col1:
                    st.success(
                        f"üìç **Munic√≠pio Mais Pr√≥ximo:**\n{municipio_mais_proximo[0]} - {municipio_mais_proximo[1]:.0f} km")

                with col2:
                    st.error(
                        f"üö© **Munic√≠pio Mais Distante:**\n{municipio_mais_distante[0]} - {municipio_mais_distante[1]:.0f} km")

                # Criar mapa geral
                st.subheader("üó∫Ô∏è Mapa Geral dos Munic√≠pios")

                # Calcular centro do mapa baseado em todos os munic√≠pios
                centro_lat = df_municipios['Latitude'].mean()
                centro_lon = df_municipios['Longitude'].mean()

                mapa_geral = folium.Map(
                    location=[centro_lat, centro_lon],
                    zoom_start=6
                )

                # Adicionar Porto Alegre (refer√™ncia)
                folium.Marker(
                    location=[porto_alegre_lat, porto_alegre_lon],
                    popup="<b>PORTO ALEGRE</b><br>üè† Base de Refer√™ncia",
                    icon=folium.Icon(color='red', icon='home', prefix='fa'),
                    tooltip="Porto Alegre - Base de Refer√™ncia"
                ).add_to(mapa_geral)

                # Adicionar munic√≠pios com cores baseadas na dist√¢ncia
                max_distancia = df_municipios['Distancia_POA_km'].max()
                min_distancia = df_municipios['Distancia_POA_km'].min()

                for _, municipio_info in df_municipios.iterrows():
                    # Calcular cor baseada na dist√¢ncia (verde = pr√≥ximo, vermelho = distante)
                    if max_distancia > min_distancia:
                        normalizado = (municipio_info['Distancia_POA_km'] - min_distancia) / (
                                    max_distancia - min_distancia)
                    else:
                        normalizado = 0

                    if normalizado < 0.33:
                        cor = 'green'  # Pr√≥ximo
                        cor_fill = '#28a745'
                    elif normalizado < 0.66:
                        cor = 'orange'  # M√©dio
                        cor_fill = '#ffc107'
                    else:
                        cor = 'red'  # Distante
                        cor_fill = '#dc3545'

                    # Tamanho baseado na quantidade de medidores
                    tamanho = max(8, min(25, municipio_info['Total_Medidores'] / 50))

                    # Adicionar marcador do munic√≠pio
                    folium.CircleMarker(
                        location=[municipio_info['Latitude'], municipio_info['Longitude']],
                        radius=tamanho,
                        color=cor,
                        fill=True,
                        fillColor=cor_fill,
                        fillOpacity=0.7,
                        popup=f"""
                        <b>{municipio_info['Munic√≠pio']}</b><br>
                        üìç {municipio_info['Total_Medidores']} medidores<br>
                        üéØ {municipio_info['Pontos_Unicos']} pontos √∫nicos<br>
                        üìè {municipio_info['Distancia_POA_km']:.0f} km de Porto Alegre<br>
                        üìä Densidade: {municipio_info['Total_Medidores'] / municipio_info['Pontos_Unicos']:.1f} med/ponto
                        """,
                        tooltip=f"{municipio_info['Munic√≠pio']} - {municipio_info['Distancia_POA_km']:.0f} km"
                    ).add_to(mapa_geral)

                    # Adicionar linha conectando a Porto Alegre para munic√≠pios mais distantes
                    if municipio_info['Distancia_POA_km'] == municipio_mais_distante[1]:
                        folium.PolyLine(
                            locations=[
                                [porto_alegre_lat, porto_alegre_lon],
                                [municipio_info['Latitude'], municipio_info['Longitude']]
                            ],
                            color='red',
                            weight=3,
                            opacity=0.8,
                            popup=f"Maior dist√¢ncia: {municipio_mais_distante[1]:.0f} km"
                        ).add_to(mapa_geral)

                st.components.v1.html(mapa_geral._repr_html_(), height=600)

                # Legenda do mapa
                st.markdown("""
                **üó∫Ô∏è Legenda do Mapa:**
                - üè† **Marcador Vermelho**: Porto Alegre (Base de Refer√™ncia)
                - üü¢ **Verde**: Munic√≠pios pr√≥ximos (< 33% da dist√¢ncia m√°xima)
                - üü† **Laranja**: Munic√≠pios a dist√¢ncia m√©dia (33-66%)
                - üî¥ **Vermelho**: Munic√≠pios distantes (> 66% da dist√¢ncia m√°xima)
                - **Tamanho do c√≠rculo**: Proporcional ao n√∫mero de medidores
                - **Linha vermelha**: Conex√£o com munic√≠pio mais distante
                """)

                # Tabela detalhada das dist√¢ncias
                st.markdown("---")
                st.subheader("üìä An√°lise Detalhada de Dist√¢ncias")

                # Ordenar por dist√¢ncia
                df_tabela = df_municipios.sort_values('Distancia_POA_km', ascending=True).copy()
                df_tabela['Rank_Dist√¢ncia'] = range(1, len(df_tabela) + 1)
                df_tabela['Densidade_Med_Ponto'] = (df_tabela['Total_Medidores'] / df_tabela['Pontos_Unicos']).round(1)

                # Preparar tabela para exibi√ß√£o
                tabela_display = df_tabela[[
                    'Rank_Dist√¢ncia', 'Munic√≠pio', 'Distancia_POA_km',
                    'Total_Medidores', 'Pontos_Unicos', 'Densidade_Med_Ponto'
                ]].copy()

                tabela_display.columns = [
                    'Rank', 'Munic√≠pio', 'Dist√¢ncia POA (km)',
                    'Total Medidores', 'Pontos √önicos', 'Densidade (med/ponto)'
                ]

                # Destacar extremos
                tabela_display = tabela_display.round({'Dist√¢ncia POA (km)': 0, 'Densidade (med/ponto)': 1})

                st.dataframe(tabela_display, use_container_width=True)

                # Gr√°ficos de an√°lise
                st.markdown("---")
                st.subheader("üìà An√°lises Gr√°ficas")

                col1, col2 = st.columns(2)

                with col1:
                    # Gr√°fico de barras: Dist√¢ncias
                    fig_dist = px.bar(
                        df_tabela.head(10),  # Top 10 mais pr√≥ximos
                        x='Distancia_POA_km',
                        y='Munic√≠pio',
                        title="Top 10 Munic√≠pios Mais Pr√≥ximos de Porto Alegre",
                        labels={'Distancia_POA_km': 'Dist√¢ncia (km)', 'Munic√≠pio': 'Munic√≠pio'},
                        color='Distancia_POA_km',
                        color_continuous_scale='RdYlGn_r'
                    )
                    fig_dist.update_layout(height=400)
                    st.plotly_chart(fig_dist, use_container_width=True)

                with col2:
                    # Scatter: Dist√¢ncia vs Medidores
                    fig_scatter = px.scatter(
                        df_tabela,
                        x='Distancia_POA_km',
                        y='Total_Medidores',
                        size='Pontos_Unicos',
                        color='Densidade_Med_Ponto',
                        hover_name='Munic√≠pio',
                        title="Rela√ß√£o: Dist√¢ncia vs Quantidade de Medidores",
                        labels={
                            'Distancia_POA_km': 'Dist√¢ncia de Porto Alegre (km)',
                            'Total_Medidores': 'Total de Medidores',
                            'Densidade_Med_Ponto': 'Densidade (med/ponto)'
                        },
                        color_continuous_scale='viridis'
                    )
                    fig_scatter.update_layout(height=400)
                    st.plotly_chart(fig_scatter, use_container_width=True)

                # Estat√≠sticas resumo
                st.markdown("---")
                st.subheader("üìä Estat√≠sticas de Dist√¢ncia")

                col1, col2, col3, col4 = st.columns(4)

                with col1:
                    st.metric("üìè Dist√¢ncia M√≠nima", f"{df_municipios['Distancia_POA_km'].min():.0f} km")

                with col2:
                    st.metric("üìè Dist√¢ncia M√°xima", f"{df_municipios['Distancia_POA_km'].max():.0f} km")

                with col3:
                    st.metric("üìä Dist√¢ncia Mediana", f"{df_municipios['Distancia_POA_km'].median():.0f} km")

                with col4:
                    st.metric("üìà Desvio Padr√£o", f"{df_municipios['Distancia_POA_km'].std():.0f} km")

                # Download dos dados
                st.markdown("---")
                output_mapa = io.BytesIO()
                with pd.ExcelWriter(output_mapa, engine='openpyxl') as writer:
                    df_tabela.to_excel(writer, index=False, sheet_name='Distancias_Municipios')

                    # Adicionar estat√≠sticas
                    stats_mapa = pd.DataFrame({
                        'M√©trica': [
                            'Total de Munic√≠pios',
                            'Munic√≠pio Mais Pr√≥ximo',
                            'Dist√¢ncia M√≠nima (km)',
                            'Munic√≠pio Mais Distante',
                            'Dist√¢ncia M√°xima (km)',
                            'Dist√¢ncia M√©dia (km)',
                            'Total de Medidores',
                            'Total de Pontos √önicos'
                        ],
                        'Valor': [
                            len(municipios_dados),
                            municipio_mais_proximo[0],
                            f"{municipio_mais_proximo[1]:.0f}",
                            municipio_mais_distante[0],
                            f"{municipio_mais_distante[1]:.0f}",
                            f"{distancia_media:.0f}",
                            df_municipios['Total_Medidores'].sum(),
                            df_municipios['Pontos_Unicos'].sum()
                        ]
                    })
                    stats_mapa.to_excel(writer, index=False, sheet_name='Estatisticas')

                st.download_button(
                    label="üì§ Baixar An√°lise de Dist√¢ncias",
                    data=output_mapa.getvalue(),
                    file_name=f"analise_distancias_municipios_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    type="secondary"
                )

        # P√ÅGINA: AN√ÅLISE DE DISPERS√ÉO
        elif pagina == "üìà An√°lise de Dispers√£o":
            st.header("üìà An√°lise de Dispers√£o das Coordenadas")

            with st.spinner("Calculando dispers√µes..."):
                dispersoes = {}
                progress_bar = st.progress(0)

                for i, municipio in enumerate(municipios):
                    progress = (i + 1) / len(municipios)
                    progress_bar.progress(progress)

                    df_mun = df[df['Munic√≠pio'] == municipio]
                    media_dist, std_dist = calcular_dispersao_otimizada(df_mun)
                    dispersoes[municipio] = {
                        'media': media_dist,
                        'std': std_dist,
                        'total_medidores': len(df_mun)
                    }

                progress_bar.empty()

            df_disp = pd.DataFrame.from_dict(dispersoes, orient='index')
            df_disp.index.name = 'Munic√≠pio'
            df_disp.columns = ['M√©dia Dist√¢ncia (m)', 'Desvio Padr√£o (m)', 'Total Medidores']
            df_disp = df_disp.round(2)

            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("üìä M√©dia Geral", f"{df_disp['M√©dia Dist√¢ncia (m)'].mean():.0f}m")
            with col2:
                st.metric("üìà Desvio Padr√£o Geral", f"{df_disp['Desvio Padr√£o (m)'].mean():.0f}m")
            with col3:
                municipio_max_dispersao = df_disp['M√©dia Dist√¢ncia (m)'].idxmax()
                st.metric("üéØ Maior Dispers√£o", municipio_max_dispersao)
            with col4:
                municipio_min_dispersao = df_disp['M√©dia Dist√¢ncia (m)'].idxmin()
                st.metric("üéØ Menor Dispers√£o", municipio_min_dispersao)

            st.subheader("üìä An√°lise Detalhada por Munic√≠pio")
            st.dataframe(df_disp, use_container_width=True)

else:
    # P√°gina inicial quando n√£o h√° arquivo
    st.markdown("""
    <div style="text-align: center; padding: 3rem;">
        <h2>üìÅ Bem-vindo ao Sistema de Otimiza√ß√£o de Rotas</h2>
        <p style="font-size: 1.2rem; color: #666;">
            Fa√ßa upload de uma planilha Excel com as coordenadas dos medidores para come√ßar.
        </p>
        <br>
        <div style="background: #f8f9fa; padding: 2rem; border-radius: 10px; margin: 2rem 0;">
            <h4>üìã Requisitos do Arquivo:</h4>
            <ul style="text-align: left; max-width: 400px; margin: 0 auto;">
                <li><strong>Formato:</strong> Excel (.xlsx)</li>
                <li><strong>Coluna 'municipio':</strong> Nome do munic√≠pio</li>
                <li><strong>Coluna 'geometry':</strong> Coordenadas geogr√°ficas</li>
            </ul>
        </div>
        <div style="background: #e3f2fd; padding: 2rem; border-radius: 10px;">
            <h4>üöÄ Funcionalidades Dispon√≠veis:</h4>
            <ul style="text-align: left; max-width: 500px; margin: 0 auto;">
                <li>üó∫Ô∏è <strong>Visualiza√ß√£o de mapas</strong> por munic√≠pio</li>
                <li>üìà <strong>An√°lise de dispers√£o</strong> das coordenadas</li>
                <li>üöö <strong>Simula√ß√£o de rotas otimizadas</strong> com ACO</li>
                <li>üìã <strong>Relat√≥rios completos</strong> para todos os munic√≠pios</li>
                <li>üöÄ <strong>Processamento paralelo</strong> para melhor performance</li>
                <li>üéØ <strong>Otimiza√ß√£o inteligente</strong> para medidores colocalizados</li>
                <li>üéØ <strong>Otimiza√ß√£o de base</strong> para localiza√ß√£o √≥tima</li>
            </ul>
        </div>
        <div style="background: #f3e5f5; padding: 2rem; border-radius: 10px; margin-top: 1rem;">
            <h4>‚ö° Otimiza√ß√µes de Performance:</h4>
            <ul style="text-align: left; max-width: 600px; margin: 0 auto;">
                <li><strong>Agrupamento autom√°tico:</strong> Medidores na mesma coordenada s√£o tratados como um √∫nico ponto</li>
                <li><strong>Algoritmo adaptativo:</strong> Par√¢metros ajustados automaticamente por tamanho da cidade</li>
                <li><strong>Subsampling inteligente:</strong> Cidades grandes s√£o otimizadas mantendo pontos mais importantes</li>
                <li><strong>Early stopping:</strong> Converg√™ncia autom√°tica quando n√£o h√° melhoria</li>
                <li><strong>Processamento paralelo:</strong> M√∫ltiplos munic√≠pios processados simultaneamente</li>
            </ul>
        </div>
    </div>
    """, unsafe_allow_html=True)
